# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'path/to/design.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
from PyQt5 import QtWidgets
from PyQt5 import uic
from PyQt5.QtWidgets import QMainWindow


class MainWindow(QMainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()
        uic.loadUi('design.ui', self)

        self.r1_value = 210
        self.r2_value = 405
        self.r3_value = 625
        self.mainbotton.clicked.connect(self.browse_folder)
        self.resetButton.clicked.connect(self.reset)

    def browse_folder(self):
        resistence_store = self.dial_1.value() * 10000 + self.dial_2.value() * 1000 + \
                           self.dial_3.value() * 100 + self.dial_4.value() * 10 + \
                           self.dial_5.value() * 1 + self.dial_6.value() * 0.1

        self.resistors_store.setText('Cопротивление в магазине сопротивлений: {}'.format(resistence_store))
        # print(QtWidgets.QDial.setValue())

        single = self.single.isChecked()
        parallel = self.parallel.isChecked()
        serial = self.serial.isChecked()

        resistors_used = [[self.check_r1.isChecked(), self.r1_value],
                          [self.check_r2.isChecked(), self.r2_value],
                          [self.check_r3.isChecked(), self.r3_value]]

        value_resistors = 0

        if single or serial or parallel:

            if single:
                for resistor in resistors_used:
                    if resistor[0]:
                        value_resistors = resistor[1]

            if serial:
                for resistor in resistors_used:
                    if resistor[0]:
                        value_resistors += resistor[1]

            if parallel:
                resists = {}
                for resistor in resistors_used:
                    if resistor[0]:
                        resists.add(resistor[1])
                value_resistors = (resists[0] * resists[1]) / (resists[0] + resists[1])

        self.voltmeter.setText(str(resistence_store / 4 - value_resistors))

    def reset(self):
        for dial in {self.dial_1, self.dial_2, self.dial_3,
                     self.dial_4, self.dial_5, self.dial_6}:
            dial.setValue(0)


class Laba15(QMainWindow):
    def __init__(self):
        super(Laba15, self).__init__()
        uic.loadUi('laba15.ui', self)

        self.total_resistance = 55.5
        self.voltage_regulator = 0
        self.resistance_c = 40
        self.resistance_r = 30
        self.resistance_kat = 54
        self.measure_c_button.clicked.connect(self.measure_c)
        self.checkPower.clicked.connect(self.work)

    def work(self):
        if self.checkPower.isChecked():
            self.voltage_regulator = self.slider_voltage.value()
            print(self.voltage_regulator)

            self.ammeter.display(self.voltage_regulator/self.total_resistance)



    def measure_c(self):
        a = float('{:.3f}'.format(self.ammeter.value()))
        self.voltmeter.display("{:.1f}".format(a * self.resistance_c))

if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    window = Laba15()
    window.show()
    app.exec_()
